jsp ,기본기 정도만, -> 모델2부터 ,mvc
결론, 스프링에 넘어가기 위한 준비 작업.

스프링 레거시(설정이 많고, xml, 자바 설정),
- 초반에 설정이 많아서, 최대한, 설명을 하고,
- Todo , crud, Mybatis , 부트 스트랩을 가져와서 활용.
- 전반적인 스프링의 설정을 다 볼수 있어서 좋음.
-

소개
- 객체지향의 의존성 주입 (DI, 포함) 기법을 활용한  객체 지향 프레임워크
- 최초 로드 존슨 2002년도 책에 예제에서 활용된 프로젝트.
- J2EE , 기존에는 EJB (무거운, 유료(비쌈)) 개발 회사에서 약간 강요,
- 탈출 -> 가볍고, 재사용, 유지보수 편한 프레임워크 찾기, 개발.
-  여러 라이브러리들을 활용하기 쉽다. JDBC, Mybatis,
예) build.gradle 파일에서, npmRepository , 도구 쇼핑.

의존성 주입,
1) xml 기법으로 작업
2) 자바 설정. 어노테이션 사용 하듯이.


기존 설정, JSP 프로젝트 만들 때와 환경이 동일,
주의사항, JAVA EE 8 선택했음.

라이브러리 설치,
1. spring core , 6.1.8
2. spring context , 6.1.8
3. spring test , 6.1.8

build.gradle 파일에 복붙.

3개 스프링 메인 라이브러가 ,
=========================================================================
 6.1.8 버전 안맞아서 -> 5.3.19 임시로 변경함.=========================================================================


// https://mvnrepository.com/artifact/org.springframework/spring-core
implementation group: 'org.springframework', name: 'spring-core', version: '6.1.8'

// https://mvnrepository.com/artifact/org.springframework/spring-context
implementation group: 'org.springframework', name: 'spring-context', version: '6.1.8'

// https://mvnrepository.com/artifact/org.springframework/spring-test
testImplementation group: 'org.springframework', name: 'spring-test', version: '6.1.8'

// JSTL
    // 설정후, 오른쪽 상단 , 코끼리 싱크 버튼 클릭 해서 , 적용하기.
    // 주소 변경,
    implementation group: 'jstl', name: 'jstl', version: '1.2'

    // 마리아 db 드라이버 설치.
    // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.3.3'

    //롬복 라이브러리 설치
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.32'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.32'

    // test, 단위 테스트에서도, 사용하기.
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.32'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.32'

    //Hikari Cp 설치
    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.1.0'

    // 모델맵퍼 : DTO <-> VO 간에 변환기.
    // https://mvnrepository.com/artifact/org.modelmapper/modelmapper
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.2.0'

    // Log4j2 ,
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '3.0.0-beta2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '3.0.0-beta2'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '3.0.0-beta2'


Log4j2 설정 파일
이전 jsp 프로젝트 설정파일 재사용.
log4j2.xml
예제) 파일 내용.
<?xml version="1.0" encoding="UTF-8" ?>
<Configuration status="INFO">
  <Appenders>
    <Console name="Console" target="SYSTEM_OUT">
      <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36}-%msg%n"/>

    </Console>
  </Appenders>
  <Loggers>
    <Root level="info">
      <AppenderRef ref="Console"/>
    </Root>
  </Loggers>
</Configuration>





스프링 부트 (설정이 대부분 자동화됨, 하지만, 필요한 부분의 설정은 커스텀 마이징 가능. )

